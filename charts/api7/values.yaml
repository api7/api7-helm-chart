# Default values for api7ee3.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

dashboard:
  replicaCount: 1
  # Specifies the name of Secret for dashboard TLS configuration, and files store under /app/certs directory
  keyCertSecret: ""
  image:
    repository: api7/api7-ee-3-integrated
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "v3.2.14.2"
  extraEnvVars: []
  extraVolumes: []
  extraVolumeMounts: []

dp_manager:
  replicaCount: 1
  image:
    repository: api7/api7-ee-dp-manager
    pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
    tag: "v3.2.14.2"
  extraEnvVars: []
  extraVolumes: []
  extraVolumeMounts: []

developer_portal:
  replicaCount: 1
  image:
    repository: api7/api7-developer-portal
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "v0.0.6"
  extraEnvVars: []

imagePullSecret: ""
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

dashboard_service:
  type: ClusterIP
  port: 7080
  tlsPort: 7443
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: dashboard.local
        paths:
          - path: /
            pathType: ImplementationSpecific
            # backend:
            #   service:
            #     name: api7ee3-dashboard
            #     port:
            #       number: 7943
    tls: []
    #  - secretName: dashboard-tls
    #    hosts:
    #      - dashboard.local

dp_manager_service:
  type: ClusterIP
  port: 7900
  tlsPort: 7943
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: dp-manager.local
        paths:
          - path: /
            pathType: ImplementationSpecific
            # backend:
            #   service:
            #     name: api7ee3-dp-manager
            #     port:
            #       number: 7943
    tls: []
    #  - secretName: dp-manager-tls
    #    hosts:
    #      - dp-manager.local

developer_portal_service:
  type: ClusterIP
  port: 4321
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: developer-portal.local
        paths:
          - path: /
            pathType: ImplementationSpecific
            # backend:
            #   service:
            #     name: api7ee3-developer-portal
            #     port:
            #       number: 7943
    tls: []
    #  - secretName: developer-portal-tls
    #    hosts:
    #      - developer-portal.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

busybox:
  image:
    repository: docker.io/busybox
    tag: 1.28

prometheus:
  builtin: true
  fullnameOverride: "api7-prometheus"
  alertmanager:
    enabled: false
  server:
    existingSecret: "" # name of existing secret to mount the path of prometheus client certs.
    enableRemoteWriteReceiver: true
    enableAdminAPI: true
    serviceAccount:
      create: false
    rbac:
      create: false
    persistence:
      enabled: true
      size: 120Gi
    service:
      type: ClusterIP
      ports:
        http: 9090
    configuration: ""

postgresql:
  builtin: true
  fullnameOverride: "api7-postgresql"
  primary:
    persistence:
      size: 256Gi
    service:
      ports:
        postgresql: 5432
  readReplicas:
    persistence:
      size: 256Gi
    service:
      ports:
        postgresql: 5432
  auth:
    username: api7ee
    password: changeme
    database: api7ee

dashboard_configuration:
  server:
    listen:
      disable: true
      host: "0.0.0.0"
      port: 7080
    tls:
      disable: false
      host: "0.0.0.0"
      port: 7443
      key_file: ""    # the file path of private key, (e.g. /app/certs/tls.key)
      cert_file: ""   # the file path of certificate, (e.g. /app/certs/tls.crt)
    status:
      disable: false
      host: "127.0.0.1"
      port: 7081
  session_options_config:
    same_site: "lax"  # means the value SameSiteNoneMode
    secure: false
    max_age: 86400
  log:
    level: warn
    output: stderr
  database:
    dsn: "postgres://api7ee:changeme@api7-postgresql:5432/api7ee"
    max_idle_conns: 2
    max_open_conns: 30
  prometheus:
    addr: "http://api7-prometheus-server:9090"
    basic_auth: # access the prometheus with basic-auth
      username: "" # Basic-auth username. If the username is empty, basic-auth authentication is not performed when requesting prometheus.
      password: ""
    tls:
      server_name: ""
      insecure_skip_verify: false
      enable_client_cert: false
      key_file: ""  # the file path of the private key for requesting prometheus, (e.g. /app/prometheus/certs/tls.key)
      cert_file: "" # the file path of the certificate for requesting prometheus, (e.g. /app/prometheus/certs/tls.crt)
      ca_file: ""   # the file path of the ca to verify the prometheus tls server. (e.g. /app/prometheus/certs/ca.crt)
    whitelist:
      - "/api/v1/query_range"
      - "/api/v1/query"
      - "/api/v1/format_query"
      - "/api/v1/series"
      - "/api/v1/labels"
  console:
    addr: "http://127.0.0.1:3000"
#  fallback_cp:
#    aws_s3:
#      access_key: "access"
#      secret_key: "secret"
#      region: "ap-south-1"
#      bucket: "to-push-ha-data"
#    cron_spec: "@every 1m"

  plugins:
    - real-ip
    - error-page
    - client-control
    - proxy-control
    - zipkin
    #- skywalking
    - ext-plugin-pre-req
    - mocking
    - serverless-pre-function
    - batch-requests
    - ua-restriction
    - referer-restriction
    - uri-blocker
    - request-validation
    - authz-casbin
    - authz-casdoor
    - wolf-rbac
    - multi-auth
    - ldap-auth
    - forward-auth
    - saml-auth
    - opa
    - authz-keycloak
    #- error-log-logger
    - proxy-mirror
    - proxy-cache
    - api-breaker
    - limit-req
    #- node-status
    - gzip
    - kafka-proxy
    #- dubbo-proxy
    - grpc-transcode
    - grpc-web
    - public-api
    - data-mask
    - opentelemetry
    - datadog
    - echo
    - loggly
    - splunk-hec-logging
    - skywalking-logger
    - google-cloud-logging
    - sls-logger
    - tcp-logger
    - rocketmq-logger
    - udp-logger
    - file-logger
    - clickhouse-logger
    - ext-plugin-post-resp
    - serverless-post-function
    - azure-functions
    - aws-lambda
    - openwhisk
    - consumer-restriction
    - acl
    - basic-auth
    - cors
    - csrf
    - fault-injection
    - hmac-auth
    - jwt-auth
    - key-auth
    - openid-connect
    - limit-count
    - redirect
    - request-id
    - proxy-rewrite
    - response-rewrite
    - workflow
    - proxy-buffering
    - tencent-cloud-cls
    - soap
    - openfunction
    - graphql-proxy-cache
    - ext-plugin-post-req
    #- log-rotate
    - graphql-limit-count
    - elasticsearch-logger
    - kafka-logger
    - body-transformer
    - traffic-split
    - degraphql
    - http-logger
    - cas-auth
    - traffic-label
    - oas-validator
    - api7-traffic-split
    - limit-conn
    - prometheus
    - syslog
    - ip-restriction

dp_manager_configuration:
  server:
    listen:
      host: "0.0.0.0"
      port: 7900
    tls:
      host: "0.0.0.0"
      port: 7943
    status:
      disable: false
      host: "127.0.0.1"
      port: 7901
  log:
    level: warn
    output: stderr
  database:
    dsn: "postgres://api7ee:changeme@api7-postgresql:5432/api7ee"
    max_idle_conns: 2
    max_open_conns: 30
  prometheus:
    addr: "http://api7-prometheus-server:9090"
    basic_auth: # access the prometheus with basic-auth
      username: "" # Basic-auth username. If the username is empty, basic-auth authentication is not performed when requesting prometheus.
      password: ""
    tls:
      server_name: ""
      insecure_skip_verify: false
      enable_client_cert: false
      key_file: ""  # the file path of the private key for requesting prometheus, (e.g. /app/prometheus/certs/tls.key)
      cert_file: "" # the file path of the certificate for requesting prometheus, (e.g. /app/prometheus/certs/tls.crt)
      ca_file: ""   # the file path of the ca to verify the prometheus tls server. (e.g. /app/prometheus/certs/ca.crt)

developer_portal_configuration:
  enable: true
  server:
    listen:
      host: "0.0.0.0"
      port: 4321
      tls:
        enabled: true
