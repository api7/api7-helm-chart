#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

nameOverride: ""
fullnameOverride: ""

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# replicaCount represents the number of desired api7-dashboard replicas.
# NOTE: as api7-dashboard doesn't share the login states, DO NOT touch this
# value.
replicaCount: 1
# clusterDomain is the domain suffix for target Kubernetes cluster.
clusterDomain: cluster.local
# labels to filter the deployed Kubernetes worker ndoes.
nodeSelector: {}

image:
  # Registry for the api7-dashboard image.
  registry: docker.io
  # Repository for the api7-dashboard image
  repository: api7/api7-dashboard
  # Tag for the api7-dashboard image
  tag: dev
  # The image pull policy for api7-dashboard image
  pullPolicy: IfNotPresent

imagePullSecrets: []

# Whether to register Route and Upstream to API7, so that API7-Dashboard can be
# accessed through API7.
# Basically it should be executed when you install API7-Dashboard for the first time.
selfRegister:
  enabled: false
  host: api7-dashboard.apiseven.com

# Whether to customize the `schema.json` for the dashboard.
# If customize it, will mount `conf/schema.json` into the container, You can customize your schema in `conf/schema.json`.
# Otherwise use the default `schema.json` in the image.
# Basically, you don't need to enable it unless you're the admin of APISEVEN Cloud and want to use it in the APISEVEN Cloud scenario.
customSchema:
  enabled: false

service:
  # The api7-dashboard service type.
  type: ClusterIP
  # loadBalancerIP: a.b.c.d
  loadBalancerSourceRanges: []

# Note if builtin is false and clusters field are empty, prometheus won't be
# configured in api7-dashboard.
prometheus:
  # Use builtin Prometheus server or reusing existing Kubernetes server.
  builtin: true
  # Existing prometheus clusters should be filled here
  clusters: []

  server:
    enable: true
  alertmanager:
    enabled: true
  kubeStateMetrics:
    enabled: false
  nodeExporter:
    enabled: false
  pushgateway:
    enabled: false
  configmapReload:
    prometheus:
      enabled: false
    alertmanager:
      enabled: false

grafana:
  builtin: true

# etcd configuration
# use the FQDN address or the IP of the etcd
etcd:
  # install etcd(v3) by default, set false if do not want to install etcd(v3) together,
  # in such a case, etcd.host should be configured so that existing ETCD cluster can be
  # used.
  builtin: true
  name: "default"
  hosts:
    - http://etcd.host:2379 # host or ip e.g. http://172.20.128.89:2379
  prefix: "/api7"
  timeout: 30
  sevice:
    ports:
      client: 2379
  auth:
    rbac:
      # No authentication by default
      enabled: false
      create: false
      ## etcd user
      ##
      user: ""
      ## etcd password
      ##
      password: ""
    # Whether to set up secure transport to ETCD cluster.
    tls:
      enalbed: false
      # An existing secret stores the credentials to communicate with ETCD cluster.
      existingSecret: ""
      # Certificate filename used to communicate ETCD cluster.
      certFilename: "tls.crt"
      # Private key filename used to communicate ETCD cluster.
      certKeyFilename: "tls.key"
      certCAFilename: "ca.crt"
      verify: true

opensearch:
  # Use builtin OpenSearch server or reusing existing Kubernetes server.
  builtin: true
  replicas: 1
  hosts:
    - http://127.0.0.1:9200
  auth:
    rbac:
      username: "admin"
      password: "admin"
    tls:
      verify: false

# api7-dashboard configurations
config:
  # Key prefix used by api7-dashboard in ETCD cluster.
  allowList: []
  allowAdmin: []
  trustedProxies: []
  http:
    enabled: true
    servicePort: 9000
    port: 9000
  tls:
    enabled: false
    servicePort: 9443
    port: 9443
    secretName: ""
    mtls_enabled: true
  k8sSupport:
    enable: true
    namespaces: ["*"]
    clusterDomain: "cluster.local"
    clusterRole: "services-lister"
    serviceAccount: "api7-account"
    clusterRoleBinding: "api7-services-account-binding"
  authentication:
    secret: "qwerty"
    expire_time: 3600     # jwt token expire time, in second
    api_key: adi2c9f034335f136f87ad84b628c8f9 # make simple api key authentication for some API, such as webhook.
    allow_login_failed_times: 0     # the maximum number of login failures allowed, if the number of failed login attempts exceeds the limit within a certain period of time, the account will be locked
                                    # 0 means no limit
    login_failed_stat_duration: 1h  # the maximum allowable login failures statistics duration.
    login_failed_lock_duration: 1h  # the account locked duration.
    session_store_prefix: "/session"   # the prefix for store the session id in etcd, so that manager api can keep the session when reload.
    session_age: 604800                # the age of session
    users:                # yamllint enable rule:comments-indentation
      - username: admin   # username and password for login `manager api`
        password: admin
    ldap:
      enable: false         # Whether enable the LDAP syncer
      host: ""              # The host of LDAP server
      port: 3004            # The port of LDAP server
      sync_time: []         # The sync_time of LDAP syncer, the format like `0 2 * * *` stands for run in 2:00 am every day
      username: "cn=user-login,cn=user,dc=test"         #  The username of LDAP server admin
      password: "Xvnhg6EVpEq-_"                         #  The password of LDAP server admin
      base_dn: "dc=test"                                #  The base distinguished name of LDAP server
      filter: "(&(objectclass=person)(cn=user-login))"  #  The filter that will be added in search request
      delete_user: false                                #  API7-Dashboard will delete the user that was deleted by LDAP server
      field_map:                                        #  The field map of api7-dashboard and LDAP server, the key is the field in api7-dashboard, the value is the filed in LDAP server
        username: name
        email: mail
  log:
    error_log:
      level: warn
      file_path: "/dev/stderr"
    access_log:
      file_path: "/dev/stdout"
  security:
    access_control_allow_origin: ""  # cors setting, need update it before deploy on k8s
    access_control_allow_credentials: false
    access_control_allow_headers: ""
    access_control-allow_methods: "*"
    x_frame_options: "deny"
    content_security_policy: "default-src 'self'; img-src 'self' blob: data:; frame-src *; script-src 'self' 'unsafe-eval' 'unsafe-inline'; style-src 'self' 'unsafe-eval' 'unsafe-inline'"
  audit:
    enabled: true     # Whether to enable audit log
  plugins:
    - api-breaker
    - authz-casbin
    - authz-keycloak
    - basic-auth
    # - batch-requests
    - client-control
    - consumer-restriction
    - cors
    - dubbo-proxy
    - echo
    - ext-plugin-pre-req
    - ext-plugin-post-req
    - error-log-logger
    - fault-injection
    - grpc-transcode
    - gzip
    - hmac-auth
    - http-logger
    - ip-restriction
    - jwt-auth
    - kafka-logger
    - key-auth
    # - log-rotate
    - limit-conn
    - limit-count
    - limit-req
    # - node-status
    - openid-connect
    - prometheus
    - proxy-cache
    - proxy-mirror
    - proxy-rewrite
    - real-ip
    - redirect
    - referer-restriction
    - request-id
    - request-validation
    - response-rewrite
    - serverless-post-function
    - serverless-pre-function
    # - skywalking
    - sls-logger
    - syslog
    - tcp-logger
    - ua-restriction
    - udp-logger
    - uri-blocker
    - wolf-rbac
    - zipkin
    - server-info
    - traffic-split
